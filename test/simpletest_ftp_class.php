<?php 

set_include_path(get_include_path() . PATH_SEPARATOR . 
                 __DIR__ . '/../simpletest' . PATH_SEPARATOR . 
                 __DIR__ . '/..');
require_once('autorun.php'); 
require_once('ftp_class.php');

define('HOST', 'guesstimate.dbc.dk');
define('CREDENTIALS', 'fvs/jukilo90');

define('REMOTE_FILENAME', 'ftp_class_unittest_file.dat');
define('ASCII_TESTFILE_CONTENT', "This is a testfile, generated by the unit test of ftp_class\n");
define('BINARY_TESTFILE_CONTENT', 11762837);

class TestOfFtpClass extends UnitTestCase {
  private $ftp;
  private $ascii_file_name;
  private $binary_file_name;
  private $ascii_file_name_error;
  private $binary_file_name_error;
  private $local_ftp_file_name;

  function __construct($label = false) {
    parent::__construct($label);
    $this->ascii_file_name = tempnam('', 'ftp_class_unit_test_ascii_');
    file_put_contents($this->ascii_file_name, ASCII_TESTFILE_CONTENT);
    chmod($this->ascii_file_name, 0777);
    $this->binary_file_name = tempnam('', 'ftp_class_unit_test_binary_');
    file_put_contents($this->binary_file_name, pack('i', BINARY_TESTFILE_CONTENT));
    chmod($this->binary_file_name, 0777);
    $this->local_ftp_file_name = tempnam('', 'ftp_class_unit_test_local_');
    chmod($this->local_ftp_file_name, 0777);
  }
  
  function __destruct() {
    if (isset($this->ftp) and is_object($this->ftp)) {
      try {
        @$this->ftp->delete(REMOTE_FILENAME);
      } catch (Exception $exc) {}
      unset($this->ftp);
    }
    @unlink($this->ascii_file_name);
    @unlink($this->binary_file_name);
    @unlink($this->local_ftp_file_name);
  }
  
  function test_instantiation() {
    $test_data = array(
      array('host'=>'',     'credentials'=>'',          'result'=>FALSE, 'error'=>'Error making a connection for '),  
      array('host'=>'kurt', 'credentials'=>'abe',       'result'=>FALSE, 'error'=>'Error making a connection for kurt'),  
      array('host'=>HOST,   'credentials'=>'',          'result'=>FALSE, 'error'=>'Error logging in to guesstimate.dbc.dk'),  
      array('host'=>HOST,   'credentials'=>'abe',       'result'=>FALSE, 'error'=>'Error logging in to guesstimate.dbc.dk'),  
      array('host'=>HOST,   'credentials'=>CREDENTIALS, 'result'=>TRUE,  'error'=>'' ),
    );

    foreach ($test_data as $data) {
      $result = TRUE;  // No error
      $error = '';
      try {
        $this->ftp = @new ftp($data['host'], $data['credentials']);
      } catch (Exception $e) {
        $result = FALSE;
        $error = $e->getMessage();
      }
      $this->assertEqual($result, $data['result']);
      $this->assertEqual($error, $data['error']);
    }
  }
    
  function test_put_and_get() {
    $this->ftp = new ftp(HOST, CREDENTIALS);
    // Test ASCII data
    $this->ftp->put_ascii($this->ascii_file_name, REMOTE_FILENAME);
    $this->ftp->get_ascii($this->local_ftp_file_name, REMOTE_FILENAME);
    $received_content = file_get_contents($this->local_ftp_file_name);
    $this->assertEqual($received_content, ASCII_TESTFILE_CONTENT);
    // Test binary data
    $this->ftp->put_binary($this->binary_file_name, REMOTE_FILENAME);
    $this->ftp->get_binary($this->local_ftp_file_name, REMOTE_FILENAME);
    $received_content = file_get_contents($this->local_ftp_file_name);
    $this->assertEqual($received_content, pack('i', BINARY_TESTFILE_CONTENT));
  }
  
   function test_delete() {
    $this->ftp = new ftp(HOST, CREDENTIALS);
    $this->ftp->put_ascii($this->ascii_file_name, REMOTE_FILENAME);
    $this->ftp->get_ascii($this->local_ftp_file_name, REMOTE_FILENAME);
    $this->ftp->delete(REMOTE_FILENAME);
    $delete_error = FALSE;
//    try {
//      $this->ftp->get_ascii($this->local_ftp_file_name, REMOTE_FILENAME);
//    } catch (Exception $e) {
//      $delete_error = TRUE;
//    }
//    $this->assertTrue($delete_error);
  }
  
}

?>
